#!/bin/bash
# filepath: scripts/doc_analysis.sh

echo "=== Kibana Documentation Analysis ==="

# Function to find all package directories (those containing package.json)
find_all_packages() {
  find . -name "package.json" \
    -not -path "./node_modules/*" \
    -not -path "./.es/*" \
    -not -path "./target/*" \
    -not -path "./bazel-*" \
    -not -path "./.moon/*" \
    -not -path "*/node_modules/*" \
    -not -path "*/__fixtures__/*" \
    -not -path "*/integration_tests/*" \
    -not -path "*/test_fixtures/*" \
    -exec dirname {} \; | sort -u
}

# Get all package directories
all_packages=($(find_all_packages))
total_dirs=${#all_packages[@]}

# Also count packages that should have READMEs (exclude root and some special cases)
packages_should_have_readme=()
for pkg in "${all_packages[@]}"; do
  # Skip root package and some special directories
  if [[ "$pkg" != "." && "$pkg" != "./config" && "$pkg" != "./scripts" && ! "$pkg" =~ .*/(integration_tests|__fixtures__|test_fixtures|test_data|mocks)/.* ]]; then
    packages_should_have_readme+=("$pkg")
  fi
done
total_dirs=${#packages_should_have_readme[@]}

echo "Total packages/plugins found: $total_dirs"

# Find directories without README.md
echo -n "Packages without README.md: "
no_readme=0
for dir in "${packages_should_have_readme[@]}"; do
  if [[ ! -f "$dir/README.md" ]]; then
    ((no_readme++))
  fi
done

if [ $total_dirs -gt 0 ]; then
  percentage=$(echo "scale=1; $no_readme * 100 / $total_dirs" | bc 2>/dev/null || echo "0.0")
  echo "$no_readme ($percentage%)"
else
  echo "$no_readme (0.0%)"
fi

# Find generated/placeholder READMEs
echo -n "Generated/Placeholder READMEs: "
generated=0
for dir in "${packages_should_have_readme[@]}"; do
  if [[ -f "$dir/README.md" ]]; then
    if grep -q -E "(Empty package generated by @kbn/generate|This is a placeholder|TODO: Add documentation|Generated by.*generator|Add your plugin description)" "$dir/README.md" 2>/dev/null; then
      ((generated++))
    fi
  fi
done
echo "$generated"

# Find short READMEs (likely minimal) - only count those that exist
echo -n "Short READMEs (<100 words): "
short_readmes=0
for dir in "${packages_should_have_readme[@]}"; do
  if [[ -f "$dir/README.md" ]]; then
    word_count=$(wc -w < "$dir/README.md" 2>/dev/null || echo 0)
    if [[ $word_count -lt 100 ]]; then
      ((short_readmes++))
    fi
  fi
done
echo "$short_readmes"

# Find comprehensive READMEs (with multiple sections) - only count those that exist
echo -n "Comprehensive READMEs (>300 words + sections): "
comprehensive=0
for dir in "${packages_should_have_readme[@]}"; do
  if [[ -f "$dir/README.md" ]]; then
    word_count=$(wc -w < "$dir/README.md" 2>/dev/null || echo 0)
    section_count=$(grep -c "^#" "$dir/README.md" 2>/dev/null || echo 0)
    if [[ $word_count -gt 300 && $section_count -gt 3 ]]; then
      ((comprehensive++))
    fi
  fi
done
echo "$comprehensive"

echo ""
echo "=== Quality Breakdown ==="
echo "No Documentation: $no_readme"
echo "Generated/Placeholder: $generated"
echo "Minimal Documentation: $short_readmes"
echo "Comprehensive Documentation: $comprehensive"

# Calculate and display percentages for quality breakdown
if [ $total_dirs -gt 0 ]; then
  echo ""
  echo "=== Percentage Breakdown ==="
  no_doc_pct=$(echo "scale=1; $no_readme * 100 / $total_dirs" | bc 2>/dev/null || echo "0.0")
  gen_pct=$(echo "scale=1; $generated * 100 / $total_dirs" | bc 2>/dev/null || echo "0.0")
  min_pct=$(echo "scale=1; $short_readmes * 100 / $total_dirs" | bc 2>/dev/null || echo "0.0")
  comp_pct=$(echo "scale=1; $comprehensive * 100 / $total_dirs" | bc 2>/dev/null || echo "0.0")

  echo "No Documentation: $no_doc_pct%"
  echo "Generated/Placeholder: $gen_pct%"
  echo "Minimal Documentation: $min_pct%"
  echo "Comprehensive Documentation: $comp_pct%"
fi

# Show examples of packages without READMEs
echo ""
echo "=== Examples of packages without README.md ==="
count=0
for dir in "${packages_should_have_readme[@]}"; do
  if [[ ! -f "$dir/README.md" && $count -lt 10 ]]; then
    echo "  - $dir"
    ((count++))
  fi
  if [[ $count -ge 10 ]]; then
    break
  fi
done

if [[ $no_readme -gt 10 ]]; then
  echo "  ... and $((no_readme - 10)) more packages without README.md"
fi
